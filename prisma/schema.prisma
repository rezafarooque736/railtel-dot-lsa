generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  dotLsaLocation String
  emailVerified  DateTime? @map("email_verified")
  image          String?
  role           String?   @default("user")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Session        Session[]
  Account        Account[]

  @@map("users")
}

model Dotlsa {
  id                            String    @id @default(cuid())
  service_id                    String    @unique
  organisation_name             String
  network_ip_address            String
  date_since_network_ip_address DateTime
  other_ip_address              String?
  date_since_other_ip_address   DateTime?
  bandwidth                     String
  email                         String
  phone_no                      String
  address                       String
  state                         String
  network_carriage_service      String?
  routing_protocol              String?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt

  @@map("dotlsa")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
